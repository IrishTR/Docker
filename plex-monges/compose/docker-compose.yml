########################### NETWORKS
networks:
  t3_proxy:
    name: t3_proxy
    driver: bridge
    ipam:
      config:
        - subnet: $TRAEFIK_NETWORK
  default:
    driver: bridge

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  networks:
    - t3_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t3_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# SECRETS
secrets:
  plex_claim:
    file: $DOCKERDIR/secrets/plex_claim
  plex_token:
    file: $DOCKERDIR/secrets/plex_token
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  http_password:
    file: $DOCKERDIR/secrets/http_password
  http_username:
    file: $DOCKERDIR/secrets/http_username
  cf_email:
    file: $DOCKERDIR/secrets/cf_email
  cf_api_key:
    file: $DOCKERDIR/secrets/cf_api_key
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  guac_db_name:
    file: $DOCKERDIR/secrets/guac_db_name
  guac_mysql_user:
    file: $DOCKERDIR/secrets/guac_mysql_user
  guac_mysql_password:
    file: $DOCKERDIR/secrets/guac_mysql_password
  glances_password:
    file: $DOCKERDIR/secrets/glances_password
  glances_pass:
    file: $DOCKERDIR/secrets/glances_pass    
  portainer_key:
    file: $DOCKERDIR/secrets/portainer_key
  tautulli_api:
    file: $DOCKERDIR/secrets/tautulli_api_key
  hpusername:
    file: $DOCKERDIR/secrets/hpusername
  hppassword:
    file: $DOCKERDIR/secrets/hppassword


########################### SERVICES
services:

# Traefik 3 - Reverse Proxy
  traefik:
    <<: *common-keys-core
    image: traefik:3.3
    container_name: traefik
    profiles: ["infra", "all"]
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --api=true
      - --api.dashboard=true
      # - --api.insecure=true
      # - --ping=true
      # - --serversTransport.insecureSkipVerify=true
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$IPWHITELIST
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      #- --providers.docker.endpoint=tcp://socket-proxy:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t3_proxy 
      # - --providers.docker.swarmMode=false # Traefik v2 Swarm
      # - --providers.swarm.endpoint=tcp://127.0.0.1:2377 # Traefik v3 Swarm
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAINNAME
      #- --entrypoints.websecure.http.tls.domains[1].main=$DOMAINNAME_1
      #- --entrypoints.websecure.http.tls.domains[1].sans=*.$DOMAINNAME_1
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.propagation.delayBeforeChecks=90
#      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
#      - --experimental.plugins.cloudflarewarp.modulename=github.com/BetterCorp/cloudflarewarp
#      - --experimental.plugins.cloudflarewarp.version=v1.3.3
    networks:
      t3_proxy:
        ipv4_address: $TRAEFIK_IP
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik3/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/traefik3/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/traefik3/logs:/logs # for fail2ban - make sure to touch file before starting container
    environment:
      <<: *default-tz-puid-pgid
      DOMAINNAME: $DOMAINNAME
      CF_API_EMAIL_FILE: /run/secrets/cf_email
      CF_API_KEY_FILE: /run/secrets/cf_api_key
      HTPASSWD_FILE: /run/secrets/htpasswd
    secrets:
      - cf_email
      - cf_api_key
      - htpasswd
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik2.$DOMAINNAME`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

# Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    <<: *common-keys-core
    image: reddthebamf/traefik-forward-auth:1.23.2-alpine-amd64 #thomseddon/traefik-forward-auth
    container_name: oauth
    profiles: ["infra", "all"]
    volumes:
      - $DOCKERDIR/oauth/rules:/rules
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth2.$DOMAINNAME
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=websecure"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth2.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

# Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core
    image: portainer/portainer-ce
    container_name: portainer
    profiles: ["infra", "all"]
    command: -H unix:///var/run/docker.sock
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-rtr.entrypoints=websecure"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer2.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

# Homepage - Application Dashboard
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["infra", "all"]
    networks:
      - t3_proxy
    ports:
     - "$HOMEPAGE_PORT:3000" 
    volumes:
      - $DOCKERDIR/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro # pass local proxy
      - $USERDIR/media:/media
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: 999
      HOMEPAGE_ALLOWED_HOSTS: www2.$DOMAINNAME
      HOMEPAGE_VAR_DOMAINNAME: $DOMAINNAME
      HOMEPAGE_VAR_HDHOMERUN_IP: $HDHOMERUN_IP
      HOMEPAGE_VAR_SERVER_IP: $SERVER_IP
      HOMEPAGE_VAR_ROUTER_IP: $ROUTER_IP
      HOMEPAGE_VAR_PLEX_PORT: $PLEX_PORT
      HOMEPAGE_VAR_HOMEPAGE_LABEL: $HOMEPAGE_LABEL
      HOMEPAGE_VAR_HOMEPAGE_LAT: $HOMEPAGE_LAT
      HOMEPAGE_VAR_HOMEPAGE_LONG: $HOMEPAGE_LONG
      HOMEPAGE_VAR_HOMEPAGE_TZ: $TZ
      HOMEPAGE_FILE_HPUSERNAME: /run/secrets/hpusername
      HOMEPAGE_FILE_HPPASSWORD: /run/secrets/hppassword
      HOMEPAGE_FILE_GLANCES_PASS: /run/secrets/glances_pass
      HOMEPAGE_FILE_PLEX_TOKEN: /run/secrets/plex_token
      HOMEPAGE_FILE_PORTAINER_KEY: /run/secrets/portainer_key
      HOMEPAGE_FILE_TAUTULLI_API: /run/secrets/tautulli_api
    secrets:
      - hpusername
      - hppassword
      - portainer_key
      - glances_pass
      - plex_token
      - tautulli_api
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.homepage-rtr.entrypoints=websecure"
      - "traefik.http.routers.homepage-rtr.rule=Host(`www2.$DOMAINNAME`)"
      # Middlewares
      - "traefik.http.routers.homepage-rtr.middlewares=chain-oauth@file"
      # HTTP Services
      - "traefik.http.routers.homepage-rtr.service=homepage-svc"
      - "traefik.http.services.homepage-svc.loadbalancer.server.port=3000"

# MariaDB - MySQL Database
  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    hostname: mariadb
    networks:
      - default
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["infra", "all"]
    ports:
      - "$MARIADB_PORT:3306"
    volumes:
      - $DOCKERDIR/mariadb/data:/config
    environment:
      <<: *default-tz-puid-pgid
      FILE__MYSQL_ROOT_PASSWORD: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password

# phpMyAdmin - Database management
  phpmyadmin:
    <<: *common-keys-apps
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    profiles: ["infra", "all"]
    networks:
       - default
       - t3_proxy
    ports:
      - "$PHPMYADMIN_PORT:80"
    environment:
      <<: *default-tz-puid-pgid
      PMA_HOST: $MARIADB_HOST
      PMA_PORT: $MARIADB_PORT
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma2.$DOMAINNAME`)"
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

# Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser 
# Create all databases and tables first
  guacamole:
    image: guacamole/guacamole
    container_name: guacamole
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["infra", "remote"]
    networks:
      - t3_proxy
      - default
    volumes:
      - $DOCKERDIR/guacamole/temp:/temp
    ports:
      - "$GUACAMOLE_PORT:8080"
    environment:
      <<: *default-tz-puid-pgid
      REMOTE_IP_VALUE_ENABLED: true
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $MARIADB_HOST
      MYSQL_PORT: $MARIADB_PORT
      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
    secrets:
      - guac_db_name
      - guac_mysql_user
      - guac_mysql_password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.guacamole-rtr.entrypoints=websecure"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac2.$DOMAINNAME`)"
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole"
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

# Guacamole Daemon - Needed for Guacamole
  guacd:
#    <<: *common-keys-core
    image: guacamole/guacd
    container_name: guacd
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["infra", "remote"]

# Cloudflare DDNS - Dynamic DNS Updater
  cloudddns:
    <<: *common-keys-core
    image: reddthebamf/cloudflare-ddns:22-alpine3.19 #joshava/cloudflare-ddns
    container_name: cloudddns
    profiles: ["infra", "all"]
    volumes:
      - $DOCKERDIR/cloudflare-ddns/config.yaml:/app/config.yaml
    environment:
      <<: *default-tz-puid-pgid
      DOMAINNAME: $DOMAINNAME

############################# MEDIA
  plex:
    <<: *common-keys-apps
    image: linuxserver/plex
    container_name: plex
    profiles: ["media", "all"]
    # runtime: nvidia
    environment:
      <<: *default-tz-puid-pgid
      PLEX_CLAIM_FILE: /run/secrets/plex_claim
      ADVERTISE_IP: http://$SERVER_IP:$PLEX_PORT/,https://plex2.$DOMAINNAME/
      ALLOWED_NETWORKS: $IPWHITELIST
      VERSION: docker
      # NVIDIA_VISIBLE_DEVICES: all
      # NVIDIA_DRIVER_CAPABILITIES: compute,video,utility
    devices:
      - /dev/dri:/dev/dri
    secrets:
      - plex_claim
    hostname: plex
    networks:
      t3_proxy:
    ports:
      - $PLEX_PORT:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 5351:5351/udp
      - 5353:5353/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 33400:33400/tcp
    volumes:
      - $DOCKERDIR/Plex/preroll:/preroll
      - $USERDIR/media:/media
      - $DOCKERDIR/Plex/DB:/config
      - /dev/shm:/transcode
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex-rtr.entrypoints=websecure"
      - "traefik.http.routers.plex-rtr.rule=Host(`plex2.$DOMAINNAME`)"
      - "traefik.http.routers.plex-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.plex-rtr.service=plex-svc"
      - "traefik.http.services.plex-svc.loadbalancer.server.port=32400"

# Jellyfin - Media Server
  jellyfin:
    image: linuxserver/jellyfin:latest
    container_name: jellyfin
    networks:
      - t3_proxy
    security_opt:
      - no-new-privileges:true
    restart: "no"
    profiles: ["media", "all"]
#    user: $PUID:$PGID
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    ports:
      - "$JELLYFIN_PORT:8096"
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 022
    volumes:
      - $DOCKERDIR/jellyfin:/config
      - $USERDIR/media:/data/media
      - $DOWNLOAD_DIR:/data/downloads
      - /dev/shm:/data/transcode
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin-rtr.entrypoints=websecure"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin2.$DOMAINNAME`)"
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"

# Tautulli - Plex statistics and monitoring
  tautulli:
    <<: *common-keys-apps
    image: linuxserver/tautulli
    container_name: tautulli
    profiles: ["media", "all"]
    ports:
      - "$TAUTULLI_PORT:8181"
    volumes:
      - $DOCKERDIR/tautulli/config:/config
      - $DOCKERDIR/tautulli/logs:/logs:ro
    environment:
      <<: *default-tz-puid-pgid
    depends_on:
      - plex
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli-rtr.entrypoints=websecure"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli2.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
      ## API Oauth Bypass
      - "traefik.http.routers.tautulli-api-rtr.entrypoints=websecure"
      - "traefik.http.routers.tautulli-api-rtr.rule=Host(`tautulli2.${DOMAINNAME}`) && (Header(`X-Api-Key`, `${TAUTULLI_DEVICE_KEY}`) || Query(`apikey`, `${TAUTULLI_DEVICE_KEY}`))"
      - "traefik.http.routers.tautulli-api2-rtr.rule=Host(`tautulli2.${DOMAINNAME}`) && (Header(`X-Api-Key`, `${TAUTULLI_API}`) || Query(`apikey`, `${TAUTULLI_API}`))"
      - "traefik.http.routers.tautulli-api-rtr.priority=100"
      - "traefik.http.routers.tautulli-api2-rtr.priority=101"
      - "traefik.http.routers.tautulli-api-rtr.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-api-rtr.service=tautulli-svc"

############################# UTILITIES

# Glances - System Information
  glances:
    <<: *common-keys-apps
    image: nicolargo/glances
    container_name: glances
    profiles: ["infra", "all"]
    privileged: true
    ports:
      - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      - $DOCKERDIR/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      <<: *default-tz-puid-pgid
#      GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      GLANCES_OPT: "-w --password"
    secrets:
      - source: glances_password
        target: /root/.config/glances/glances.pwd
    labels:
      - "traefik.enable=true"
      # HTTP Routers Auth Bypass
      - "traefik.http.routers.glances-rtr-bypass.entrypoints=websecure"
      - "traefik.http.routers.glances-rtr-bypass.rule=Host(`glances2.$DOMAINNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.glances-rtr-bypass.priority=100"
      # HTTP Routers Auth
      - "traefik.http.routers.glances-rtr.entrypoints=websecure"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances2.$DOMAINNAME`)"
      - "traefik.http.routers.glances-rtr.priority=99"
      # Middlewares
      - "traefik.http.routers.glances-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.glances-rtr.middlewares=chain-no-auth@file"
      # HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.routers.glances-rtr-bypass.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

# Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle
    container_name: dozzle
    profiles: ["infra", "all"]
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      <<: *default-tz-puid-pgid
      DOZZLE_LEVEL: info
#      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      DOZZLE_NO_ANALYTICS: 1
#      DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle-rtr.entrypoints=websecure"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle2.$DOMAINNAME`)"
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

# WatchTower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-apps
    image: containrrr/watchtower
    container_name: watchtower
    profiles: ["infra", "all"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy and comment this line for improved security.
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      # DOCKER_HOST: tcp://socket-proxy:2375 # Use this if you have Socket Proxy enabled.
      DOCKER_API_VERSION: "1.48"

# Docker-GC - Automatic Docker Garbage Collection 
# Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps
    image: clockworksoul/docker-gc-cron #reddthebamf/docker-gc-cron
    container_name: docker-gc
    profiles: ["infra", "all"]
#    network_mode: none
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $DOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      <<: *default-tz-puid-pgid
      CRON: 0 0 0 * * ?
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1

# Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    <<: *common-keys-apps
    image: humenius/traefik-certs-dumper #kereis/traefik-certs-dumper:multi-arch-builds-alpine
    container_name: traefik_certdumper
    profiles: ["infra", "all"]
#    command: --restart-containers container1,container2,container3
    volumes:
      - $DOCKERDIR/traefik3/acme:/traefik:ro
      - $DOCKERDIR/shared/certs:/output:rw
#    - /var/run/docker.sock:/var/run/docker.sock:ro # only needed if restarting containers
    environment:
      <<: *default-tz-puid-pgid
      DOMAIN: $DOMAINNAME

# Firefox - Web Broswer
  firefox:
    <<: *common-keys-apps
    image: jlesage/firefox:latest
    container_name: firefox
    security_opt:
      - seccomp:unconfined # October 15, 2020 https://github.com/jlesage/docker-firefox/blob/master/README.md#allowing-the-membarrier-system-call
    profiles: ["ff"]
    ports:
      - "$FIREFOX_PORT:5800"
    volumes:
      - $DOCKERDIR/firefox:/config
      - $DOWNLOAD_DIR:/data/downloads
      - /dev/shm:/dev/shm
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1920
      DISPLAY_HEIGHT: 1080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.firefox-rtr.entrypoints=websecure"
      - "traefik.http.routers.firefox-rtr.rule=Host(`firefox2.$DOMAINNAME`)"
      - "traefik.http.routers.firefox-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.firefox-rtr.service=firefox-svc"
      - "traefik.http.services.firefox-svc.loadbalancer.server.port=5800"

# VSCode - VSCode Editing
  vscode:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/code-server:latest
    container_name: vscode
    profiles: ["infra", "all"]
    ports:
      - "$VSCODE_PORT:8443"
    volumes:
      - $DOCKERDIR:/data/docker
      - $USERDIR:/data/server
#      - $DATADIR:/data/data
      - $DOCKERDIR/vscode:/config
    environment:
      <<: *default-tz-puid-pgid
      # DOCKER_HOST: tcp://socket-proxy:2375
      # PASSWORD: $VSCODE_PASSWORD
      # HASHED_PASSWORD: #optional
      # SUDO_PASSWORD: password #optional
      # SUDO_PASSWORD_HASH: #optional
      # PROXY_DOMAIN: code-server.my.domain #optional
#      DEFAULT_WORKSPACE: /config/data/User/Workspaces/AZ.code-workspace #optional
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vscode-rtr.entrypoints=websecure"
      - "traefik.http.routers.vscode-rtr.rule=Host(`code2.$DOMAINNAME`)"
      - "traefik.http.routers.vscode-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.vscode-rtr.service=vscode-svc"
      - "traefik.http.services.vscode-svc.loadbalancer.server.port=8443"

  whoami:
    image: traefik/whoami
    container_name: whoami
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    profiles: ["infra", "all"]
    networks:
      - t3_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-rtr.entrypoints=websecure"
      - "traefik.http.routers.whoami-rtr.rule=Host(`whoami2.$DOMAINNAME`)"
      - "traefik.http.routers.whoami-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.whoami-rtr.service=whoami-svc"
      - "traefik.http.services.whoami-svc.loadbalancer.server.port=80"

  threadfin:
    <<: *common-keys-apps
    image: fyb3roptik/threadfin
    container_name: threadfin
    ports:
      - $THREADFIN_PORT:34400
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/threadfin/conf:/home/threadfin/conf
      - $USERDIR/media/threadfin/temp:/tmp/threadfin:rw
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.threadfin-rtr.entrypoints=websecure"
      - "traefik.http.routers.threadfin-rtr.rule=Host(`threadfin2.$DOMAINNAME`)"
      - "traefik.http.routers.threadfin-rtr.middlewares=chain-oauth@file,add-threadfin"
      - "traefik.http.middlewares.add-threadfin.addPrefix.prefix=/web"
      - "traefik.http.routers.threadfin-rtr.service=threadfin-svc"
      - "traefik.http.services.threadfin-svc.loadbalancer.server.port=34400"

#WireGuard VPN Server
  wireguard:
    <<: *common-keys-core
    image: linuxserver/wireguard
    container_name: wireguard
    profiles: ["infra", "remote"]
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      <<: *default-tz-puid-pgid
      SERVERURL: vpn2.$DOMAINNAME
      SERVERPORT: 51820
      PEERS: $WIREGUARD_PEER1, $WIREGUARD_PEER2 # number of peers/names
      PEERDNS: auto #optional
      ALLOWEDIPS: $WIREGUARD_ALLOWEDIPS
    volumes:
      - $DOCKERDIR/wireguard/config:/config
      - $DOCKERDIR/wireguard/modules:/lib/modules
    ports:
      - $WIREGUARD_VPN_PORT:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
